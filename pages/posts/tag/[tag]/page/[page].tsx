import Head from 'next/head'
import {
    getAllTags,
    getNumberOfPagesByTag,
    getPostsByTagAndPage
} from '../../../../../lib/notionAPI'
import SinglePost from '../../../../../components/Post/SinglePost';
import {
    GetStaticPaths,
    GetStaticProps,
    GetStaticPropsContext,
    NextPage
} from 'next';
import { NotionApiCustomPost } from '../../../../../common/commonType';
import Pagination from '../../../../../components/Pagination/Pagination';
import { ParsedUrlQuery } from 'querystring';
import Tag from '../../../../../components/Tag/Tag';

interface BlogTagPageListProps {
    postsByTag: NotionApiCustomPost[],
    numberOfPagesByTag: number,
    currentTag: string,
    allTags: string[],
}

interface TagParams {
    params: {
        tag: string | undefined,
        page: string,
    } | ParsedUrlQuery
}

export const getStaticPaths: GetStaticPaths = async () => {
    const allTags: (string | undefined)[] = await getAllTags();

    let params: TagParams[] = [];
    // 複数回の非同期処理を行う際は Promise.all()で囲う。
    await Promise.all(
        allTags.map((tag: string | undefined) => {
            const paths: Promise<void> = getNumberOfPagesByTag(tag!)
                .then((numberOfPageByTag: number) => {
                    for (let i = 1; i <= numberOfPageByTag; i++) {
                        params.push({ params: { tag: tag, page: i.toString() } })

                    }
                });
            return paths
        })
    )

    return {
        paths: params,
        fallback: 'blocking'
    }
}

// SSG
export const getStaticProps: GetStaticProps = async (context: GetStaticPropsContext) => {
    const currentPage = context.params?.page?.toString();

    const currentTag = context.params?.tag?.toString();

    const upperCaseCurrentTag =
        currentTag?.charAt(0).toUpperCase() + currentTag!.slice(1);

    const postsByTag = await getPostsByTagAndPage(
        upperCaseCurrentTag,
        parseInt(currentPage!, 10)
    );

    const numberOfPagesByTag = await getNumberOfPagesByTag(upperCaseCurrentTag);

    const allTags = await getAllTags();

    return {
        props: {
            postsByTag,
            numberOfPagesByTag,
            currentTag,
            allTags,
        },
        // ISR 60秒毎に再更新する。※今回は6時間毎
        revalidate: 60 * 60 * 6,
    }
}

const BlogTagPageList: NextPage<BlogTagPageListProps> = ({
    postsByTag,
    numberOfPagesByTag,
    currentTag,
    allTags,
}: BlogTagPageListProps) => {

    return (
        <>
            <div className="container h-full w-full mx-auto">
                <Head >
                    <title>Notion-Blog</title>
                    <meta name="description" content="Generated by create next app" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <main className="container w-full mt-16">
                    <h1 className="text-5xl font-medium text-center mb-16">Notion Blog 📒</h1>
                    <section className="sm:grid grid-cols-2 w-5/6 gap-3 mx-auto">
                        {postsByTag.map((post) => (
                            <div key={post.id}>
                                <SinglePost
                                    id={post.id}
                                    title={post.title}
                                    description={post.description}
                                    date={post.date}
                                    tags={post.tags}
                                    slug={post.slug}
                                    isPaginationPage={true}
                                />
                            </div>
                        ))}
                    </section>
                    <Pagination
                        numberOfPage={numberOfPagesByTag}
                        tag={currentTag}
                    />
                    <Tag tags={allTags} />
                </main>
            </div>
        </>
    )
}

export default BlogTagPageList;